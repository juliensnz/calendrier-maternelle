{"version":3,"sources":["domain/model/day.ts","domain/model/date.ts","domain/model/month.ts","application/component/calendar.tsx","domain/model/year.ts","misc/translator.ts","app.tsx","serviceWorker.js","index.tsx"],"names":["Day","ConcreteDate","year","month","day","Object","classCallCheck","this","freeze","Date","numberValue","date","equals","Month","ConcreteDay","Calendar","_colors","_this$props","props","hollydays","onDateClick","colors","defineProperty","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","numberOfDays","getDate","views","Array","from","keys","map","dayOfMonth","create","DomainDate","react_default","a","createElement","key","dateValue","className","concat","some","hollyday","style","backgroundColor","getDay","onClick","Fragment","Component","ConcreteMonth","MIN_YEAR","ConcreteYear","Error","translations","en-US","fr-FR","translator","accessProperty","navigator","language","data","pathPart","split","undefined","length","slice","join","App","state","getMonth","getFullYear","nextDate","nextState","setState","dateToToggle","newHollydays","filter","toConsumableArray","previousMonth","bind","window","print","nextMonth","toLocaleDateString","calendar","toggleHollyday","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","app","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2287c0f.chunk.js","sourcesContent":["export enum Day {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\nexport default class ConcreteDay {\n  private constructor(private day: number) {\n    Object.freeze(this);\n  }\n\n  static create(day: number) {\n    return new ConcreteDay(day);\n  }\n\n  numberValue(): number {\n    return this.day as number;\n  }\n\n  equals(day: ConcreteDay): boolean {\n    return this.day === day.day;\n  }\n}\n","import ConcreteMonth from './month';\nimport ConcreteYear from './year';\nimport ConcreteDay from './day';\n\nexport default class ConcreteDate {\n  private constructor(private year: ConcreteYear, private month: ConcreteMonth, private day: ConcreteDay) {\n    Object.freeze(this);\n  }\n\n  static create(year: ConcreteYear, month: ConcreteMonth, day: ConcreteDay) {\n    return new ConcreteDate(year, month, day);\n  }\n\n  dateValue(): Date {\n    return new Date(this.year.numberValue(), this.month.numberValue(), this.day.numberValue());\n  }\n\n  equals(date: ConcreteDate): boolean {\n    return this.year.equals(date.year) && this.month.equals(date.month) && this.day.equals(date.day);\n  }\n}\n","export enum Month {\n  January,\n  February,\n  March,\n  April,\n  May,\n  June,\n  July,\n  August,\n  September,\n  October,\n  November,\n  December\n}\n\nexport default class ConcreteMonth {\n  private constructor(private month: Month) {\n    Object.freeze(this);\n  }\n\n  static create(month: Month) {\n    return new ConcreteMonth(month);\n  }\n\n  numberValue(): number {\n    return this.month as number;\n  }\n\n  equals(month: ConcreteMonth): boolean {\n    return this.month === month.month;\n  }\n}\n","import React, { Component } from 'react';\nimport Month from '../../domain/model/month';\nimport Year from '../../domain/model/year';\nimport DomainDate from '../../domain/model/date';\nimport ConcreteDay, {Day} from '../../domain/model/day';\n\ntype Props = {\n  month: Month,\n  year: Year,\n  hollydays: DomainDate[],\n  onDateClick: (date: DomainDate) => void,\n}\n\nclass Calendar extends Component<Props> {\n  render() {\n    const {month, year, hollydays, onDateClick} = this.props;\n    const colors = {\n      [Day.Sunday as number]: '#ffffff',\n      [Day.Monday as number]: '#eeeeee',\n      [Day.Tuesday as number]: '#f9e6a8',\n      [Day.Wednesday as number]: '#f4a6ca',\n      [Day.Thursday as number]: '#2bade1',\n      [Day.Friday as number]: '#a7dac7',\n      [Day.Saturday as number]: '#f37077'\n    }\n    const numberOfDays = new Date(year.numberValue(), month.numberValue() + 1, 0).getDate();\n\n    const views = Array.from(Array(numberOfDays).keys()).map((dayOfMonth: number) => {\n      const day = ConcreteDay.create(dayOfMonth + 1);\n      const date = DomainDate.create(year, month, day);\n\n      return <div\n          key={date.dateValue().getDate()}\n          className={`Day ${hollydays.some((hollyday: DomainDate) => hollyday.equals(date)) ? 'Day--hollyday' : ''}`}\n          style={{backgroundColor: colors[date.dateValue().getDay()]}}\n          onClick={() => {\n            onDateClick(DomainDate.create(year, month, day));\n          }}\n        >\n        {date.dateValue().getDate()}\n      </div>\n    })\n\n    return (\n      <React.Fragment>\n        <div className=\"Calendar\">\n          {views}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Calendar;\n","const MIN_YEAR = 1970;\n\nexport default class ConcreteYear {\n  private constructor(private year: number) {\n    if (MIN_YEAR > year) {\n      throw new Error(`The year needs to be more that ${MIN_YEAR}`)\n    }\n\n    Object.freeze(this);\n  }\n\n  static create(year: number) {\n    return new ConcreteYear(year);\n  }\n\n  numberValue(): number {\n    return this.year as number;\n  }\n\n  equals(year: ConcreteYear): boolean {\n    return this.year === year.year;\n  }\n}\n","import english from './translation/en.json';\nimport french from './translation/fr.json';\n\nconst translations: {[locale: string]: any} = {\n  'en-US': english,\n  'fr-FR': french\n};\n\nconst translator = (key: string) => {\n  return accessProperty(translations[navigator.language], key);\n}\n\nexport default translator;\n\nconst accessProperty = (data: any, key: string): any => {\n  var pathPart = key.split('.');\n\n  if (undefined === data[pathPart[0]]) {\n      return '';\n  }\n\n  return 1 === pathPart.length ?\n      data[pathPart[0]] :\n      accessProperty(data[pathPart[0]], pathPart.slice(1).join('.'));\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calendar from './application/component/calendar';\nimport ConcreteMonth from './domain/model/month';\nimport ConcreteYear from './domain/model/year';\nimport translator from './misc/translator';\nimport DomainDate from './domain/model/date';\n\nclass App extends Component {\n  state = {\n    month: (new Date()).getMonth(),\n    year: (new Date()).getFullYear(),\n    hollydays: []\n  }\n\n  previousMonth() {\n    const nextDate = new Date(this.state.year, this.state.month - 1);\n    const nextState = {\n      year: nextDate.getFullYear(),\n      month: nextDate.getMonth()\n    }\n    this.setState(nextState);\n  }\n\n  nextMonth() {\n    const nextDate = new Date(this.state.year, this.state.month + 1);\n    const nextState = {\n      year: nextDate.getFullYear(),\n      month: nextDate.getMonth()\n    }\n    this.setState(nextState);\n  }\n\n  toggleHollyday(dateToToggle: DomainDate) {\n    const newHollydays = this.state.hollydays.filter((date: DomainDate) => !date.equals(dateToToggle));\n    if (newHollydays.length !== this.state.hollydays.length) {\n      this.setState({hollydays: newHollydays});\n    } else {\n      this.setState({hollydays: [...newHollydays, dateToToggle]});\n    }\n  }\n\n  render() {\n    const month = ConcreteMonth.create(this.state.month);\n    const year = ConcreteYear.create(this.state.year);\n    const date = new Date(year.numberValue(), month.numberValue());\n\n    return (\n      <div className=\"App\">\n        <div className=\"Menu\">\n          <span className=\"Menu-item\" onClick={this.previousMonth.bind(this)}>{translator('menu.previous')}</span>\n          <span className=\"Menu-item\" onClick={() => window.print()}>{translator('menu.print')}</span>\n          <span className=\"Menu-item\" onClick={this.nextMonth.bind(this)}>{translator('menu.next')}</span>\n        </div>\n        <div className=\"Page\">\n          <h1 className=\"Page-title\">{date.toLocaleDateString(navigator.language, { year: 'numeric', month: 'long'})}</h1>\n          <Calendar month={month} year={year} hollydays={this.state.hollydays} onDateClick={this.toggleHollyday.bind(this)}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}