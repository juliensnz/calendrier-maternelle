{"version":3,"sources":["domain/model/day.ts","domain/model/month.ts","application/component/calendar.tsx","domain/model/year.ts","app.tsx","serviceWorker.js","index.tsx"],"names":["Day","Month","Calendar","_colors","_this$props","this","props","month","year","colors","Object","defineProperty","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","numberOfDays","Date","numberValue","getDate","views","Array","from","keys","map","dayOfMonth","date","react_default","a","createElement","key","className","style","backgroundColor","getDay","Fragment","Component","ConcreteMonth","classCallCheck","freeze","MIN_YEAR","ConcreteYear","Error","concat","App","onClick","window","print","calendar","create","December","Boolean","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IAAYA,0SCAAC,ECwCGC,mLA7BJ,IAAAC,EAAAC,EACeC,KAAKC,MAApBC,EADAH,EACAG,MAAOC,EADPJ,EACOI,KACRC,GAAMN,EAAA,GAAAO,OAAAC,EAAA,EAAAD,CAAAP,EACTH,EAAIY,OAAmB,WADdF,OAAAC,EAAA,EAAAD,CAAAP,EAETH,EAAIa,OAAmB,WAFdH,OAAAC,EAAA,EAAAD,CAAAP,EAGTH,EAAIc,QAAoB,WAHfJ,OAAAC,EAAA,EAAAD,CAAAP,EAITH,EAAIe,UAAsB,WAJjBL,OAAAC,EAAA,EAAAD,CAAAP,EAKTH,EAAIgB,SAAqB,WALhBN,OAAAC,EAAA,EAAAD,CAAAP,EAMTH,EAAIiB,OAAmB,WANdP,OAAAC,EAAA,EAAAD,CAAAP,EAOTH,EAAIkB,SAAqB,WAPhBf,GASNgB,EAAe,IAAIC,KAAKZ,EAAKa,cAAed,EAAMc,cAAgB,EAAG,GAAGC,UAExEC,EAAQC,MAAMC,KAAKD,MAAML,GAAcO,QAAQC,IAAI,SAACC,GACxD,IAAMC,EAAO,IAAIT,KAAKZ,EAAKa,cAAed,EAAMc,cAAeO,EAAa,GAE5E,OAAOE,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKP,UAAWY,UAAU,MAAMC,MAAO,CAACC,gBAAiB3B,EAAOoB,EAAKQ,YACnFR,EAAKP,aAIV,OACEQ,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACGf,UAxBcgB,uBDVXtC,6SAeSuC,aACnB,SAAAA,EAA4BjC,GAAeG,OAAA+B,EAAA,EAAA/B,CAAAL,KAAAmC,GAAAnC,KAAAE,QACzCG,OAAOgC,OAAOrC,gEAQd,OAAOA,KAAKE,uCALAA,GACZ,OAAO,IAAIiC,EAAcjC,YErBvBoC,EAAW,KAEIC,aACnB,SAAAA,EAA4BpC,GAC1B,GADyCE,OAAA+B,EAAA,EAAA/B,CAAAL,KAAAuC,GAAAvC,KAAAG,OACrCmC,EAAWnC,EACb,MAAM,IAAIqC,MAAJ,kCAAAC,OAA4CH,IAGpDjC,OAAOgC,OAAOrC,gEAQd,OAAOA,KAAKG,sCALAA,GACZ,OAAO,IAAIoC,EAAapC,YCObuC,mLAXX,OACEjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAAA,QAAMgB,QAAS,kBAAMC,OAAOC,UAA5B,SACApB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAACmB,EAAD,CAAU5C,MAAOiC,EAAcY,OAAOnD,EAAMoD,UAAW7C,KAAMoC,EAAaQ,OAAO,iBANzEb,aCMEe,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9bc4fc97.chunk.js","sourcesContent":["export enum Day {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n","export enum Month {\n  January,\n  February,\n  March,\n  April,\n  May,\n  June,\n  July,\n  August,\n  September,\n  October,\n  November,\n  December\n}\n\nexport default class ConcreteMonth {\n  private constructor(private month: Month) {\n    Object.freeze(this);\n  }\n\n  static create(month: Month) {\n    return new ConcreteMonth(month);\n  }\n\n  numberValue(): number {\n    return this.month as number;\n  }\n}\n","import React, { Component } from 'react';\nimport Month from '../../domain/model/month';\nimport Year from '../../domain/model/year';\nimport {Day} from '../../domain/model/day';\n\ntype Props = {\n  month: Month,\n  year: Year,\n}\n\nclass Calendar extends Component<Props> {\n  render() {\n    const {month, year} = this.props;\n    const colors = {\n      [Day.Sunday as number]: '#ffffff',\n      [Day.Monday as number]: '#eeeeee',\n      [Day.Tuesday as number]: '#f9e6a8',\n      [Day.Wednesday as number]: '#f4a6ca',\n      [Day.Thursday as number]: '#2bade1',\n      [Day.Friday as number]: '#a7dac7',\n      [Day.Saturday as number]: '#f37077'\n    }\n    const numberOfDays = new Date(year.numberValue(), month.numberValue() + 1, 0).getDate();\n\n    const views = Array.from(Array(numberOfDays).keys()).map((dayOfMonth: number) => {\n      const date = new Date(year.numberValue(), month.numberValue(), dayOfMonth + 1);\n\n      return <div key={date.getDate()} className=\"Day\" style={{backgroundColor: colors[date.getDay()]}}>\n        {date.getDate()}\n      </div>\n    })\n\n    return (\n      <React.Fragment>\n        {views}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Calendar;\n","const MIN_YEAR = 1970;\n\nexport default class ConcreteYear {\n  private constructor(private year: number) {\n    if (MIN_YEAR > year) {\n      throw new Error(`The year needs to be more that ${MIN_YEAR}`)\n    }\n\n    Object.freeze(this);\n  }\n\n  static create(year: number) {\n    return new ConcreteYear(year);\n  }\n\n  numberValue(): number {\n    return this.year as number;\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calendar from './application/component/calendar';\nimport ConcreteMonth, {Month} from './domain/model/month';\nimport ConcreteYear from './domain/model/year';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <span onClick={() => window.print()}>Print</span>\n        <div className=\"Page\">\n          <Calendar month={ConcreteMonth.create(Month.December)} year={ConcreteYear.create(2018)}/>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}